console.log("1. рж╢рзБрж░рзБ"); // synchronous

setTimeout(() => {
    console.log("2. setTimeout callback"); // asynchronous
}, 0);

Promise.resolve().then(() => {
    console.log("3. Promise callback"); // microtask
});

console.log("4. рж╢рзЗрж╖"); // synchronous


/*JavaScript ржкрзНрж░ржержорзЗ рж╕ржм synchronous (ржПржХ рж▓рж╛ржЗржирзЗ рж╕рж╛ржерзЗ рж╕рж╛ржерзЗ рж╢рзЗрж╖ рж╣ржпрж╝ ржПржоржи ржХрж╛ржЬ) ржЪрж╛рж▓рж╛ржпрж╝ред

ржпржЦржи ржХрзЛржирзЛ asynchronous ржХрж╛ржЬ (ржпрзЗржоржи setTimeout, fetch) ржЖрж╕рзЗ, рждржЦржи рж╕рзЗржЯрж╛ржХрзЗ Web APIs ржП ржкрж╛ржарж╛ржпрж╝ред

ржХрж╛ржЬ рж╢рзЗрж╖ рж╣рж▓рзЗ рж╕рзЗржЯрж╛ callback queue (ржмрж╛ microtask queue) рждрзЗ ржпрж╛ржпрж╝ред

Event Loop ржжрзЗржЦрзЗ main stack ржлрж╛ржБржХрж╛ рж╣рж▓рзЗ queue ржерзЗржХрзЗ callback ржирж┐ржпрж╝рзЗ ржЖржмрж╛рж░ ржЪрж╛рж▓рж╛ржпрж╝ред

//ржХржиржХрж╛рж░рзЗржирзНрж╕рж┐ ржорж╛ржирзЗ рж╣ржЪрзНржЫрзЗ тАФ ржПржХрж╛ржзрж┐ржХ ржХрж╛ржЬ ржПржХрж╕рж╛ржерзЗ рж╢рзБрж░рзБ ржХрж░рждрзЗ ржкрж╛рж░рж╛, ржХрж┐ржирзНрждрзБ ржЖрж╕рж▓рзЗ ржПржХржЗ рж╕ржоржпрж╝рзЗ ржЪрж╛рж▓рж╛ржирзЛ ржиржпрж╝ред
JavaScript ржПржХ ржерзНрж░рзЗржбрзЗ ржХрж╛ржЬ ржХрж░рзЗ, ржХрж┐ржирзНрждрзБ non-blocking async ржХрж╛ржЬ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржПржХржЗ рж╕рж╛ржерзЗ ржЕржирзЗржХ ржЯрж╛рж╕рзНржХ ржорзНржпрж╛ржирзЗржЬ ржХрж░рждрзЗ ржкрж╛рж░рзЗред

ЁЯСЙ ржЙржжрж╛рж╣рж░ржг:

рждрзБржорж┐ ржЪрж╛ ржмрж╛ржирж╛ржЪрзНржЫрзЛ (main task)ред

ржПржХржЗ рж╕ржоржпрж╝рзЗ рждрзБржорж┐ рж░рж╛ржЗрж╕ ржХрзБржХрж╛рж░рзЗ ржнрж╛ржд ржмрж╕рж╛рж▓рзЗ (async task)ред

рждрзБржорж┐ ржЪрж╛ ржмрж╛ржирж╛ржЪрзНржЫрзЛ, ржнрж╛ржд meantime-ржП рж░рж╛ржирзНржирж╛ рж╣рждрзЗ ржерж╛ржХрзЗред

ржнрж╛ржд рж░рж╛ржирзНржирж╛ рж╣рж▓рзЗ ржХрзБржХрж╛рж░ beep ржжрж┐ржпрж╝рзЗ ржмрж▓рзЗ тАЬрж╣ржпрж╝рзЗ ржЧрзЗржЫрзЗтАЭ (callback queue тЖТ event loop тЖТ main stack ржП ржпрж╛ржпрж╝)ред */